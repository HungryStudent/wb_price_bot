import os

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery, ChatActions, ChatMember

import keyboards.admin as admin_kb
import keyboards.user as user_kb
from states.user import CreateAccount, EditAccount, AddApiKey, ChangePrice, EditMonitoring, FindMonitoringArticle
from config import ADMINS, video_1, video_2
from create_bot import dp
from core import crud, schemas, wb_api, excel_api
from core.enums import AccountTypes

num_emoji = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]


@dp.callback_query_handler(Text(startswith="my_monitoring_articles_menu"))
async def my_monitoring_articles_menu(call: CallbackQuery):
    account_id = int(call.data.split(":")[1])
    await call.message.edit_text("<b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>",
                                 reply_markup=user_kb.get_my_monitoring_articles_menu(account_id))


@dp.callback_query_handler(Text(startswith="my_monitoring_articles"))
async def my_monitoring_articles(call: CallbackQuery):
    account_id = int(call.data.split(":")[1])
    page = int(call.data.split(":")[2])
    articles_count = crud.get_articles_count_by_account_id(account_id)[0]
    max_page = articles_count // 10
    if articles_count % 10 != 0:
        max_page += 1
    if page == 0:
        await call.answer("–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return
    elif page == max_page + 1:
        await call.answer("–í—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return

    articles = crud.get_articles_by_account_id(account_id, page=page)
    msg_text = "<b>–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç:\n\n</b>"
    for index, article in enumerate(articles):
        card: schemas.CardOut = await wb_api.get_card(article.id)
        msg_text += f'{num_emoji[index]} {card.name}, –ë—Ä–µ–Ω–¥: {card.brand}, –ê—Ä—Ç–∏–∫—É–ª: <u>{article.id}</u>, –ú–∏–Ω. —Ü–µ–Ω–∞: ' \
                    f'{article.min_price} ‚ÇΩ\n\n'
    await call.message.edit_text(msg_text, reply_markup=user_kb.get_my_monitoring_articles(account_id, page, max_page))


@dp.callback_query_handler(Text(startswith="find_my_monitoring_article"))
async def find_my_monitoring_article(call: CallbackQuery, state: FSMContext):
    account_id = int(call.data.split(":")[1])
    await call.message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</b>",
                                 reply_markup=user_kb.gef_back_to_my_monitoring_articles_menu(account_id))
    await FindMonitoringArticle.article.set()
    await state.update_data(account_id=account_id)
    await state.update_data(have_article=True)


@dp.message_handler(state=FindMonitoringArticle.article)
async def show_my_monitoring_article(message: Message, state: FSMContext):
    try:
        article_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        return

    data = await state.get_data()
    account = crud.get_account(data["account_id"])

    if not await wb_api.get_card(article_id):
        await message.answer("–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    if not await wb_api.is_my_card(account.api_key, article_id):
        await message.answer("–î–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É")
        return

    await state.update_data(article_id=article_id)
    article = crud.get_article_by_id_an_account_id(article_id, data["account_id"])
    if not article:
        await message.answer("<b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª", reply_markup=user_kb.back_to_menu)
        return
    card = await wb_api.get_card(article_id)
    await message.answer(f"""–ê—Ä—Ç–∏–∫—É–ª: <u>{card.id}</u>
<b>–°–µ–π—á–∞—Å</b>
–¶–µ–Ω–∞ –î–û —Å–∫–∏–¥–∫–∏: {card.priceU // 100}—Ä
–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {card.sale}%

–¶–µ–Ω–∞: <b>{card.salePriceU // 100}—Ä</b>
–ú–∏–Ω. —Ü–µ–Ω–∞: {article.min_price}""", reply_markup=user_kb.get_monitoring_article_menu(article_id))


@dp.callback_query_handler(Text(startswith="change_monitoring_article"), state=FindMonitoringArticle.article)
async def change_monitoring_article(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –æ–ø—É—Å–∫–∞—Ç—å—Å—è")
    await EditMonitoring.price.set()


@dp.callback_query_handler(Text(startswith="export_excel"))
async def export_excel(call: CallbackQuery):
    account_id = int(call.data.split(":")[1])
    account = crud.get_account(account_id)
    articles = crud.get_full_articles_by_account_id(account_id)
    excel_api.create_export_data(account, articles)
    await call.message.answer_document(open("docs/" + account.name + ".xlsx", "rb"),
                                       caption="<b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã</b>",
                                       reply_markup=user_kb.get_edit_account_monitoring(account_id))
    os.remove("docs/" + account.name + ".xlsx")
    await call.answer()
