from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery, ChatActions, ChatMember
from aiogram.utils.exceptions import BadRequest

import keyboards.admin as admin_kb
import keyboards.user as user_kb
from states.user import CreateAccount, EditAccount, AddApiKey, ChangePrice, EditMonitoring
from config import ADMINS, video_1, video_2
from create_bot import dp
from core import crud, schemas, wb_api
from core.enums import AccountTypes


@dp.callback_query_handler(text="monitoring_menu", state="*")
async def monitoring_menu(call: CallbackQuery, state: FSMContext):
    await state.finish()
    accounts = crud.get_accounts(call.from_user.id)
    await call.message.edit_text("""<b>–ï—Å–ª–∏ —Ü–µ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π:</b>
üü¢ –ë–æ—Ç –ø–æ–¥–Ω–∏–º–µ—Ç —Ü–µ–Ω—É (API –∫–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω)
üü° –ë–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã 
‚ö™ –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (API –ù–ï –∫–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω)""", reply_markup=user_kb.get_accounts_for_monitoring(accounts))


@dp.callback_query_handler(Text(startswith="monitoring_by_account"))
async def account_monitoring_menu(call: CallbackQuery):
    account_id = int(call.data.split(":")[1])
    try:
        await call.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é</b>", reply_markup=user_kb.get_monitoring_menu(account_id))
    except BadRequest:
        await call.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é</b>", reply_markup=user_kb.get_monitoring_menu(account_id))
        await call.answer()


@dp.callback_query_handler(Text(startswith="edit_monitoring_account"))
async def edit_account_monitoring(call: CallbackQuery, state: FSMContext):
    account_id = call.data.split(":")[1]
    await call.message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è / –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>",
                                 reply_markup=user_kb.get_edit_account_monitoring(account_id))
    await EditMonitoring.article.set()
    await state.update_data(account_id=account_id)


@dp.message_handler(state=EditMonitoring.article)
async def enter_article_for_add_to_monitoring(message: Message, state: FSMContext):
    try:
        article_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    data = await state.get_data()
    account = crud.get_account(data["account_id"])

    if not await wb_api.get_card(article_id):
        await message.answer("–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    if account.account_type != AccountTypes.notify.value:
        if not await wb_api.is_my_card(account.api_key, article_id):
            await message.answer("–î–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É")
            return

    article = crud.get_article(article_id)
    card: schemas.CardOut = await wb_api.get_card(article_id)
    await state.update_data(article_id=article_id, have_article=bool(article))
    if article:
        await message.answer(f"""–ê—Ä—Ç–∏–∫—É–ª: <u>{card.id}</u>
<b>–°–µ–π—á–∞—Å</b>
–¶–µ–Ω–∞ –î–û —Å–∫–∏–¥–∫–∏: {card.priceU // 100}—Ä
–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {card.sale}%

–¶–µ–Ω–∞: <b>{card.salePriceU // 100}—Ä</b> (–±–µ–∑ –°–ü–ü)
–ú–∏–Ω. —Ü–µ–Ω–∞: <b>{article.min_price}—Ä</b>

–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –æ–ø—É—Å–∫–∞—Ç—å—Å—è?""",
                             reply_markup=user_kb.get_article_for_monitoring(article_id))
    else:
        await message.answer(f"""–ê—Ä—Ç–∏–∫—É–ª: <u>{card.id}</u>
<b>–°–µ–π—á–∞—Å</b>
–¶–µ–Ω–∞ –î–û —Å–∫–∏–¥–∫–∏: {card.priceU // 100}—Ä
–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {card.sale}%

–¶–µ–Ω–∞: <b>{card.salePriceU // 100}—Ä</b>

–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –æ–ø—É—Å–∫–∞—Ç—å—Å—è?""",
                             reply_markup=user_kb.get_article_for_monitoring(article_id))
    await EditMonitoring.price.set()


@dp.message_handler(state=EditMonitoring.price)
async def update_price(message: Message, state: FSMContext):
    try:
        min_price = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return
    data = await state.get_data()
    if data["have_article"]:
        crud.change_price_on_article(schemas.ArticleEdit(id=data["article_id"], min_price=min_price))
    else:
        crud.add_article(
            schemas.ArticleCreate(id=data["article_id"], account_id=data["account_id"], min_price=min_price))
    await message.answer(f"""‚úÖ <b>–£–°–ü–ï–®–ù–û –£–°–¢–ê–ù–û–í–õ–ï–ù–û</b>
    
–ê—Ä—Ç–∏–∫—É–ª: <u>{data['article_id']}</u>
–ú–∏–Ω. —Ü–µ–Ω–∞: <b>{min_price} —Ä—É–±</b>""", reply_markup=user_kb.get_finish_change_monitoring_price(data["account_id"]))
    await state.finish()
