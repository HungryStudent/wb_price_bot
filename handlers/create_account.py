from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery
import keyboards.user as user_kb
from states.user import CreateAccount
from config import video_1, video_2
from create_bot import dp
from core import crud, schemas
from core.enums import AccountTypes


@dp.callback_query_handler(text="add_account")
async def add_account_info(call: CallbackQuery):
    await call.message.edit_text("""<b>–ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û API</b>

–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ <b>–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º</b> –≤–∏–¥–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω <b>–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ</b> –ø–æ–¥ —Ä–∞–±–æ—Ç—É —Å —Ü–µ–Ω–∞–º–∏.

<b>–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π API –∫–ª—é—á</b> –≤ –∫–∞–±–∏–Ω–µ—Ç–µ WB.

üü¢ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π</b> - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–Ω–∏–º–µ—Ç —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–Ω–∏–∑–∏—Ç—Å—è –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π 

üü° <b>–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π</b> - –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–º–µ–Ω—É —Ü–µ–Ω—ã.



<b>–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ë–ï–ó API</b>

üî¥ <b>–¢–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b> - –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–µ–Ω–∞–º–∏ –Ω–∞ WB, –Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω (—Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)""",
                                 reply_markup=user_kb.add_account)


@dp.callback_query_handler(Text(startswith="start_add_account"))
async def start_add_account(call: CallbackQuery, state: FSMContext):
    account_type = int(call.data.split(":")[1])
    if account_type in [AccountTypes.automate.value, AccountTypes.half_automate.value]:
        await call.message.answer_video(video_1, caption="""<b>–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á</b>

1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ WB <b>–≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏->–î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ–º—É API</b>

2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è –∫–ª—é—á–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>price_edit</b> –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á‚Äù

3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ—è–≤–∏–≤—à–∏–π—Å—è ‚Äú–ö–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API‚Äù –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–º.""",
                                        reply_markup=user_kb.back_to_add_account_from_video)

    elif account_type == AccountTypes.notify.value:
        await call.message.answer_video(video_2, caption="""1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π –≤–∞—à —Ç–æ–≤–∞—Ä –Ω–∞ WB

2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (–ù–ï –ù–ê –ë–†–ï–ù–î)

3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –Ω–∞–º. –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤–∏–¥:

https://www.wildberries.ru/seller/1""",
                                        reply_markup=user_kb.back_to_add_account_from_video)
    await call.message.delete()
    await state.set_state(CreateAccount.key)
    await state.update_data(account_type=account_type)


@dp.callback_query_handler(text="back_to_add_account_from_video", state="*")
async def back_to_add_account_from_video(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer("""<b>–ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û API</b>

–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ <b>–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º</b> –≤–∏–¥–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω <b>–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ</b> –ø–æ–¥ —Ä–∞–±–æ—Ç—É —Å —Ü–µ–Ω–∞–º–∏.

<b>–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π API –∫–ª—é—á</b> –≤ –∫–∞–±–∏–Ω–µ—Ç–µ WB.

üü¢ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π</b> - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–Ω–∏–º–µ—Ç —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–Ω–∏–∑–∏—Ç—Å—è –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π 

üü° <b>–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π</b> - –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–º–µ–Ω—É —Ü–µ–Ω—ã.



<b>–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ë–ï–ó API</b>

üî¥ <b>–¢–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b> - –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–µ–Ω–∞–º–∏ –Ω–∞ WB, –Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω (—Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)""",
                              reply_markup=user_kb.add_account)
    await call.message.delete()


@dp.message_handler(state=CreateAccount.key)
async def enter_key(message: Message, state: FSMContext):
    data = await state.get_data()
    if data["account_type"] == AccountTypes.notify.value:
        if message.text.startswith(""):
            try:
                await state.update_data(seller_id=int(message.text.replace("https://www.wildberries.ru/seller/", "")))
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É")
                return
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É")
            return
    else:
        await state.update_data(api_key=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–Ω–æ –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º)")
    await state.set_state(CreateAccount.name)


@dp.message_handler(state=CreateAccount.name)
async def enter_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()

    account = schemas.AccountCreate(**data, user_id=message.from_user.id)
    res = crud.add_account(account)
    if res == "IntegrityError":
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º api –∫–ª—é—á–æ–º –∏–ª–∏ id –ø—Ä–æ–¥–∞–≤—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                             reply_markup=user_kb.back_to_menu)
    else:
        if account.account_type in [AccountTypes.automate.value, AccountTypes.half_automate.value]:
            await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ. –í–∞—à –∫–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.", reply_markup=user_kb.back_to_menu)
        elif account.account_type == AccountTypes.notify.value:
            await message.answer("‚úÖ <b>–ö–ê–ë–ò–ù–ï–¢ –£–°–ü–ï–®–ù–û –ü–û–î–ö–õ–Æ–ß–ï–ù.</b>", reply_markup=user_kb.back_to_menu)
    await state.finish()