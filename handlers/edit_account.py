from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery
import keyboards.user as user_kb
from states.user import EditAccount, AddApiKey
from config import video_1
from create_bot import dp
from core import crud, schemas
from core.enums import AccountTypes

monitoring_text = {AccountTypes.automate.value: "–ë–æ—Ç —Å–∞–º –ø–æ–¥–Ω–∏–º–µ—Ç —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–∏–∂–µ –º–∏–Ω. —Ü–µ–Ω—ã",
                   AccountTypes.half_automate.value: "–ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–æ–¥–Ω—è—Ç—å —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–∏–∂–µ –º–∏–Ω. —Ü–µ–Ω—ã",
                   AccountTypes.notify.value: "–ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π."}

monitoring_names = {AccountTypes.automate.value: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
                    AccountTypes.half_automate.value: "–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
                    AccountTypes.notify.value: "–¢–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"}


@dp.callback_query_handler(text="show_accounts")
async def show_accounts(call: CallbackQuery):
    accounts = crud.get_accounts(call.from_user.id)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                 reply_markup=user_kb.get_accounts(accounts))


@dp.callback_query_handler(Text(startswith="show_account:"))
async def show_account(call: CallbackQuery):
    account_id = int(call.data.split(":")[1])
    account = crud.get_account(account_id)
    if account.api_key:
        api_key_connected = "üü¢ <b>API –∫–ª—é—á</b>: –ü–æ–¥–∫–ª—é—á–µ–Ω"
    else:
        api_key_connected = "üî¥ <b>API –∫–ª—é—á</b>: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
    await call.message.edit_text(f"""{account.name}
{api_key_connected}
üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitoring_text[account.account_type]}""", reply_markup=user_kb.get_account(account_id))


@dp.callback_query_handler(Text(startswith="edit_account"))
async def edit_account(call: CallbackQuery, state: FSMContext):
    field = call.data.split(":")[1]
    account_id = int(call.data.split(":")[2])
    if field == "name":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–Ω–æ –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º)",
                                     reply_markup=user_kb.cancel_edit)
    elif field == "api_key":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á",
                                     reply_markup=user_kb.cancel_edit)
    await state.set_state(EditAccount.value)
    await state.update_data(field=field, account_id=account_id)


@dp.message_handler(state=EditAccount.value)
async def enter_value_for_edit(message: Message, state: FSMContext):
    await state.update_data(value=message.text)
    data = await state.get_data()

    crud.edit_account(schemas.AccountEdit(**data))
    await message.answer("‚úÖ <b>–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–û.</b>", reply_markup=user_kb.back_to_menu)


@dp.callback_query_handler(Text(startswith="start_edit_monitoring"))
async def start_edit_monitoring(call: CallbackQuery):
    account_id = int(call.data.split(":")[1])
    await call.message.edit_text("""üü¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–Ω–∏–º–µ—Ç —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–Ω–∏–∑–∏—Ç—Å—è –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π   

üü° –ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π - –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–º–µ–Ω—É —Ü–µ–Ω—ã.    

üî¥ –¢–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è""",
                                 reply_markup=user_kb.get_edit_monitoring(account_id))


@dp.callback_query_handler(Text(startswith="edit_monitoring:"))
async def edit_monitoring(call: CallbackQuery):
    account_type = int(call.data.split(":")[1])
    account_id = int(call.data.split(":")[2])
    if account_type in [AccountTypes.automate.value, AccountTypes.half_automate.value]:
        account = crud.get_account(account_id)
        if account.api_key:
            crud.edit_account(schemas.AccountEdit(account_id=account_id, field="account_type", value=account_type))
            await call.message.edit_text(f"""‚úÖ <b>–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–û.</b>

–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:  
{monitoring_names[account_type]}""", reply_markup=user_kb.back_to_menu)

        else:
            await call.message.edit_text("""‚ùó <b>–ö–õ–Æ–ß –ù–ï –ù–ê–ô–î–ï–ù.</b> 

–î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á?""", reply_markup=user_kb.get_add_api_key(account_id, account_type))

    else:
        crud.edit_account(schemas.AccountEdit(account_id=account_id, field="account_type", value=account_type))
        await call.message.edit_text(f"""‚úÖ <b>–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–û.</b>

–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:  
{monitoring_names[account_type]}""", reply_markup=user_kb.back_to_menu)


@dp.callback_query_handler(Text(startswith="add_api_key"))
async def start_add_api_key(call: CallbackQuery, state: FSMContext):
    account_id = call.data.split(":")[1]
    account_type = call.data.split(":")[2]
    await state.set_state(AddApiKey.api_key)
    await state.update_data(account_id=account_id, account_type=account_type)
    await call.message.answer_video(video_1, caption="""<b>–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á</b>

1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ WB <b>–≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏->–î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ–º—É API</b>

2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è –∫–ª—é—á–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>price_edit</b> –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á‚Äù

3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ—è–≤–∏–≤—à–∏–π—Å—è ‚Äú–ö–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API‚Äù –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–º.""",
                                    reply_markup=user_kb.back_to_menu_from_video)


@dp.message_handler(state=AddApiKey.api_key)
async def add_api_key(message: Message, state: FSMContext):
    data = await state.get_data()
    crud.edit_account(
        schemas.AccountEdit(account_id=data["account_id"], field="account_type", value=data["account_type"]))
    crud.edit_account(schemas.AccountEdit(account_id=data["account_id"], field="api_key", value=message.text))
    await message.answer("‚úÖ <b>–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–û.</b>")


@dp.callback_query_handler(Text(startswith="delete_account"))
async def delete_account(call: CallbackQuery):
    account_id = call.data.split(":")[1]
    await call.message.edit_text("""‚ùó <b>–í–Ω–∏–º–∞–Ω–∏–µ</b>

–ï—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, –≤–º–µ—Å—Ç–∏ —Å –Ω–∏–º —É–¥–∞–ª—è—Ç—Å—è –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏.""",
                                 reply_markup=user_kb.get_delete(account_id))


@dp.callback_query_handler(Text(startswith="sure_delete_account"))
async def sure_delete_account(call: CallbackQuery):
    account_id = call.data.split(":")[1]
    crud.delete_account(account_id)
    await call.message.edit_text("<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>", reply_markup=user_kb.back_to_menu)